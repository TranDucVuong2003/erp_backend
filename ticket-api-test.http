### Ticket Management API Tests

@baseUrl = https://localhost:7228/api

### 1. Get all ticket categories
GET {{baseUrl}}/TicketCategories

### 2. Create a new ticket category
POST {{baseUrl}}/TicketCategories
Content-Type: application/json

{
    "name": "Technical Support"
}

### 3. Create another ticket category
POST {{baseUrl}}/TicketCategories
Content-Type: application/json

{
    "name": "Bug Report"
}

### 4. Create another ticket category
POST {{baseUrl}}/TicketCategories
Content-Type: application/json

{
    "name": "Feature Request"
}

### 5. Get a specific ticket category
GET {{baseUrl}}/TicketCategories/1

### 6. Update a ticket category
PUT {{baseUrl}}/TicketCategories/1
Content-Type: application/json

{
    "id": 1,
    "name": "Technical Support - Updated",
    "createdAt": "2024-01-01T00:00:00Z"
}

### 7. Get all tickets
GET {{baseUrl}}/Tickets

### 8. Create a new ticket (make sure you have customers and users in DB)
POST {{baseUrl}}/Tickets
Content-Type: application/json

{
    "title": "Website not loading properly",
    "description": "The website is loading very slowly and sometimes doesn't load at all. This issue started yesterday.",
    "customerId": 1,
    "priority": "High",
    "status": 1,
    "categoryId": 1,
    "urgencyLevel": 4,
    "userId": 1,
    "createdById": 1,
    "dateline": "2024-12-31T23:59:59Z"
}

### 9. Create another ticket
POST {{baseUrl}}/Tickets
Content-Type: application/json

{
    "title": "Login functionality broken",
    "description": "Users cannot log in to the system. Error message appears: 'Invalid credentials' even with correct username and password.",
    "customerId": 1,
    "priority": "Critical",
    "status": 1,
    "categoryId": 2,
    "urgencyLevel": 5,
    "createdById": 1
}

### 10. Get a specific ticket
GET {{baseUrl}}/Tickets/1

### 11. Get tickets with filters
GET {{baseUrl}}/Tickets?customerId=1&priority=High

### 12. Get tickets by category
GET {{baseUrl}}/Tickets?categoryId=1

### 13. Get tickets by assigned user
GET {{baseUrl}}/Tickets?userId=1

### 14. Get tickets by urgency level
GET {{baseUrl}}/Tickets?urgencyLevel=5

### 15. Get tickets by status
GET {{baseUrl}}/Tickets?status=1

### 16. Update a ticket
PUT {{baseUrl}}/Tickets/1
Content-Type: application/json

{
    "id": 1,
    "title": "Website not loading properly - Updated",
    "description": "The website is loading very slowly and sometimes doesn't load at all. This issue started yesterday. Customer called again today.",
    "customerId": 1,
    "priority": "Critical",
    "status": 2,
    "categoryId": 1,
    "urgencyLevel": 5,
    "userId": 1,
    "createdById": 1,
    "dateline": "2024-12-25T23:59:59Z",
    "createdAt": "2024-01-01T00:00:00Z"
}

### 17. Assign ticket to a user
PUT {{baseUrl}}/Tickets/2/assign
Content-Type: application/json

1

### 18. Unassign ticket (assign to null)
PUT {{baseUrl}}/Tickets/2/assign
Content-Type: application/json

null

### 19. Update ticket status
PUT {{baseUrl}}/Tickets/1/status
Content-Type: application/json

2

### 20. Close ticket (status 3)
PUT {{baseUrl}}/Tickets/1/status
Content-Type: application/json

3

### 21. Create a ticket log
POST {{baseUrl}}/TicketLogs
Content-Type: application/json

{
    "ticketId": 1,
    "content": "Initial investigation completed. Issue identified as server overload.",
    "userId": 1
}

### 22. Create another ticket log
POST {{baseUrl}}/TicketLogs
Content-Type: application/json

{
    "ticketId": 1,
    "content": "Applied temporary fix. Monitoring the situation.",
    "userId": 1
}

### 23. Get all ticket logs
GET {{baseUrl}}/TicketLogs

### 24. Get ticket logs by ticket ID
GET {{baseUrl}}/TicketLogs?ticketId=1

### 25. Get ticket logs for specific ticket (alternative endpoint)
GET {{baseUrl}}/TicketLogs/by-ticket/1

### 26. Get logs for a specific ticket via Tickets endpoint
GET {{baseUrl}}/Tickets/1/logs

### 27. Get a specific ticket log
GET {{baseUrl}}/TicketLogs/1

### 28. Update a ticket log
PUT {{baseUrl}}/TicketLogs/1
Content-Type: application/json

{
    "id": 1,
    "ticketId": 1,
    "content": "Initial investigation completed. Issue identified as server overload. Root cause found to be insufficient memory allocation.",
    "userId": 1,
    "createdAt": "2024-01-01T00:00:00Z"
}

### 29. Delete a ticket log
DELETE {{baseUrl}}/TicketLogs/1

### 30. Try to delete a ticket category with tickets (should fail)
DELETE {{baseUrl}}/TicketCategories/1

### 31. Delete a ticket (make sure no logs exist)
DELETE {{baseUrl}}/Tickets/1

### 32. Delete a ticket category (after ensuring no tickets use it)
DELETE {{baseUrl}}/TicketCategories/1

### Test Error Cases

### 33. Create ticket with non-existent customer
POST {{baseUrl}}/Tickets
Content-Type: application/json

{
    "title": "Test ticket",
    "description": "Test description",
    "customerId": 999,
    "priority": "Low",
    "status": 1,
    "categoryId": 1,
    "urgencyLevel": 1
}

### 34. Create ticket with non-existent category
POST {{baseUrl}}/Tickets
Content-Type: application/json

{
    "title": "Test ticket",
    "description": "Test description",
    "customerId": 1,
    "priority": "Low",
    "status": 1,
    "categoryId": 999,
    "urgencyLevel": 1
}

### 35. Create ticket log with non-existent ticket
POST {{baseUrl}}/TicketLogs
Content-Type: application/json

{
    "ticketId": 999,
    "content": "Test log",
    "userId": 1
}

### 36. Create ticket log with non-existent user
POST {{baseUrl}}/TicketLogs
Content-Type: application/json

{
    "ticketId": 1,
    "content": "Test log",
    "userId": 999
}

### 37. Create duplicate ticket category
POST {{baseUrl}}/TicketCategories
Content-Type: application/json

{
    "name": "Technical Support"
}